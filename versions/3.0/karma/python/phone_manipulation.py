__author__ = 'amandeep'

import re

us_area_codes = ["211", "242", "246", "264", "268", "284", "311", "345", "411", "441", "456", "473", "500", "511", "555", "600", "611", "649", "664", "684", "700", "710", "711", "758", "767", "784", "800", "809", "811", "822", "829", "833", "844", "849", "855", "866", "868", "869", "876", "877", "880", "881", "882", "888", "898", "900", "911", "976", "999", "52 55", "403", "587", "780", "825", "907", "205", "251", "256", "334", "479", "501", "870", "480", "520", "602", "623", "928", "236", "250", "604", "778", "209", "213", "310", "323", "341", "369", "408", "415", "424", "442", "510", "530", "559", "562", "619", "626", "627", "628", "650", "657", "661", "669", "707", "714", "747", "760", "764", "805", "818", "831", "858", "909", "916", "925", "935", "949", "951", "303", "719", "720", "970", "203", "475", "860", "959", "202", "302", "239", "305", "321", "352", "386", "407", "561", "689", "727", "754", "772", "786", "813", "850", "863", "904", "927", "941", "954", "229", "404", "470", "478", "678", "706", "762", "770", "912", "671", "808", "319", "515", "563", "641", "712", "208", "217", "224", "309", "312", "331", "464", "618", "630", "708", "773", "779", "815", "847", "872", "219", "260", "317", "574", "765", "812", "316", "620", "785", "913", "270", "502", "606", "859", "225", "318", "337", "504", "985", "339", "351", "413", "508", "617", "774", "781", "857", "978", "204", "431", "240", "301", "410", "443", "207", "231", "248", "269", "278", "313", "517", "586", "616", "679", "734", "810", "906", "947", "989", "218", "320", "507", "612", "651", "763", "952", "314", "417", "557", "573", "636", "660", "816", "975", "670", "228", "601", "662", "769", "406", "506", "252", "336", "704", "828", "910", "919", "980", "984", "701", "308", "402", "603", "201", "551", "609", "732", "848", "856", "862", "908", "973", "709", "505", "575", "957", "782", "902", "702", "775", "212", "315", "347", "516", "518", "585", "607", "631", "646", "716", "718", "845", "914", "917", "216", "234", "283", "330", "380", "419", "440", "513", "567", "614", "740", "937", "405", "539", "580", "918", "226", "289", "343", "365", "416", "437", "519", "548", "613", "647", "705", "807", "905", "503", "541", "971", "215", "267", "412", "484", "570", "610", "717", "724", "814", "835", "878", "787", "939", "418", "438", "450", "481", "514", "579", "819", "873", "401", "803", "843", "864", "605", "306", "639", "423", "615", "731", "865", "901", "931", "210", "214", "254", "281", "325", "361", "409", "430", "432", "469", "512", "682", "713", "737", "806", "817", "830", "832", "903", "915", "936", "940", "956", "972", "979", "385", "435", "801", "276", "434", "540", "571", "703", "757", "804", "340", "802", "206", "253", "360", "425", "509", "564", "262", "414", "608", "715", "920", "304", "681", "307", "867"]
country_dialing_codes = [
    "93", "355", "213", "1 684", "376", "244", "1 264", "672", "1 268", "54", "374", "297", "61", "43", "994", "1 242",
    "973", "880", "1 246", "375", "32", "501", "229", "1 441", "975", "591", "387", "387", "387", "387", "61", "61",
    "55", "246", "672", "359", "226", "257", "855", "237", "1", "238", "1 345", "236", "235", "56", "86", "61", "891",
    "57", "269", "242", "243", "682", "506", "225", "385", "385", "53", "357", "420", "45", "253", "1 767", "1 809",
    "670", "593", "20", "503", "240", "291", "372", "251", "500", "500", "298", "679", "358", "33", "33", "594", "689",
    "262", "241", "220", "995", "49", "233", "350", "30", "299", "1 473", "590", "1 671", "502", "224", "245", "592",
    "509", "672", "379", "379", "504", "852", "36", "354", "91", "62", "98", "964", "353", "972", "39", "1 876", "81",
    "962", "7", "254", "686", "850", "850", "82", "82", "82", "965", "996", "856", "371", "961", "266", "231", "218",
    "423", "370",
    "352", "853", "389", "261", "265", "60", "960", "223", "356", "692", "596", "222", "230", "262", "52", "691", "691",
    "373", "373", "377", "976", "382", "1 664", "212", "258", "95", "95", "264", "674", "977", "31", "599", "687", "64",
    "505", "227", "234", "683", "672", "1 670", "47", "968", "92", "680", "507", "675", "595", "51", "63", "870", "48",
    "351", "1", "974", "262", "40", "7", "250", "1 869", "1 758", "1 784", "685", "378", "239", "966", "221", "381",
    "248", "232", "65", "421", "421", "386", "677", "252", "27", "211", "500", "34", "94", "290", "508", "249", "597",
    "47", "268", "46", "41", "963", "886", "992", "255", "255", "66", "228", "690", "676", "1 868", "216", "90", "993",
    "1 649", "688", "256", "380", "971", "44", "1", "1", "598", "998", "678", "58", "84", "1 284", "1 430", "681",
    "212", "967", "260", "263"
]
USPhonePattern = re.compile(r"^\([0-9]{3}\) [0-9]{3}\-[0-9]{4}$")


class PM(object):

    def __init__(self):
        self.name = "Phone Manipulation"

    @staticmethod
    def is_us_area_code(phonenumber):
        areacode = phonenumber[0:3]
        if areacode in us_area_codes:
            return True
        return False

    @staticmethod
    def phone_exchange(phonenumber):
        """Return the first six digits of a phone if it is a 10-digit USA phone, ie, starts with 1-."""
        result = ''
        if phonenumber.startswith("+1-"):
            tendigitphone = phonenumber[3:]
            if tendigitphone.isdigit() and len(tendigitphone.decode("utf-8")) == 10:
                result = tendigitphone[0:6]
        else:
            if phonenumber.isdigit() and len(phonenumber.decode("utf-8")) == 10:
                if PM.is_us_area_code(phonenumber):
                    result = phonenumber[0:6]
        return result

    @staticmethod
    def get_phone_country_code(phone_clean):
        idx = phone_clean.find("-")
        if idx != -1:
            cc = phone_clean[0:idx]
            if cc.startswith("+"):
                cc = cc[1:]
            return cc
        return ''

    @staticmethod
    def detect_country_code(phonenumber):
        if phonenumber.find("+") == 0:
            ph = phonenumber[1:]
            for i in range(1, 5):
                cc = ph[0:i]
                try:
                    idx = country_dialing_codes.index(cc)
                    return cc
                except ValueError:
                    idx = -1
        return None

    @staticmethod
    def get_local_phone_number(phone_clean):
        idx = phone_clean.find("-")
        if idx != -1:
            return phone_clean[idx+1:]
        return phone_clean

    @staticmethod
    def clean_phone(x):
        """Return the phone as a 10 digit number,
         or as close to that as we can make it.
         Prefix with country code '+1' at the end.
        """
        if len(x) > 0:
            x = x.strip().lower()
            cc = ''
            if x.find("+") == 0:
                end1 = x.find(" ")
                end2 = x.find("-")
                if end1 == -1:
                    end1 = 10000
                if end2 == -1:
                    end2 = 10000
                if end1 != 10000 or end2 != 10000:
                    end = min(end1, end2)
                    cc = x[1:end]
                    ph = SM.numeric_only(x[end+1:])
                else:
                    test_cc = PM.detect_country_code(x)
                    if test_cc:
                        cc = test_cc
                        cc_len = len(cc)
                        ph = x[cc_len+1:]
                        ph = SM.numeric_only(ph)
                    else:
                        ph = SM.numeric_only(x)
            else:
                valid = USPhonePattern.match(x)
                if valid:
                    ph = valid.group()
                    cc = "1"
                    ph = SM.numeric_only(ph)
                else:
                    ph = SM.numeric_only(x)

            # If there are 11 numbers
            if len(ph) == 11 and ph[0] == "1":
                ph = ph[1:]
                cc = "1"

            if len(cc) > 0:
                ph = "+" + cc + "-" + ph
            return ph
        return ''

    @staticmethod
    def ten_digit_phone_number(x):
        """Return the 10-digit phone number of a phone, as 10 consecutive digits"""
        return re.sub('[^0-9]+', '', x)
